<?php

/**
 * @file
 * Simple nice calendar module that displays the materials by date.
 */

/**
 * Implements hook_menu().
 */
function pretty_calendar_menu() {
  $items = array();
  $items['calendar/%/%/%'] = array(
    'title' => 'All activities for the day',
    'page callback' => 'pretty_calendar_day_nodes',
    'page arguments' => array(1, 2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['calendar_get/%/%'] = array(
    'title' => 'Calendar',
    'page callback' => 'pretty_calendar_content_loader',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'delivery callback' => 'pretty_calendar_content_loader_delivery_callback',
    'type' => MENU_CALLBACK,
  );
  $items['calendar_links/%/%/%/%'] = array(
    'title callback' => 'pretty_calendar_links_loader_title_callback',
    'title arguments' => array(1, 2, 3, 4),
    'page callback' => 'pretty_calendar_links_loader',
    'page arguments' => array(1, 2, 3, 4),
    'access arguments' => array('access content'),
  );
  $items['calendar'] = array(
    'title' => 'Calendar',
    'page callback' => 'pretty_calendar_day_nodes',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -50,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function pretty_calendar_theme() {
  $hooks = array(
    'pretty_calendar' => array(
      'template' => 'templates/pretty-calendar',
      'variables' => array(
        'daynames' => NULL,
        'daynames_class' => NULL,
        'content' => NULL,
        'mode' => NULL,
        'month_prev' => NULL,
        'month_prev_text' => NULL,
        'month_next' => NULL,
        'month_next_text' => NULL,
        'month_name' => NULL,
        'calendar_classes' => NULL,
      ),
    ),
    'pretty_calendar_week' => array(
      'template' => 'templates/pretty-calendar-week',
      'variables' => array(
        'days' => NULL,
        'delta' => NULL,
      ),
    ),
    'pretty_calendar_day' => array(
      'template' => 'templates/pretty-calendar-day',
      'variables' => array(
        'calendar_mode' => NULL,
        'day_number' => NULL,
        'day_number_a11y' => NULL,
        'day_content' => NULL,
        'date' => NULL,
        'delta' => NULL,
        'count' => NULL,
        'link_path' => NULL,
        'popup_path' => NULL,
        'link_title' => NULL,
        'link_class' => NULL,
        'link_dialog' => NULL,
        'link_dialog_options' => NULL,
        'wrapper_class' => NULL,
        'is_empty' => NULL,
      ),
    ),
    'pretty_calendar_node_listing' => array(
      'template' => 'templates/pretty-calendar-node-listing',
      'variables' => array(
        'show_today_indicator' => NULL,
        'show_pager' => NULL,
        'date_title' => NULL,
        'pager_prev_link' => NULL,
        'pager_prev_title' => NULL,
        'pager_next_link' => NULL,
        'pager_next_title' => NULL,
        'content' => NULL,
      ),
    ),
  );
  return $hooks;
}

/**
 * Implements hook_config_info().
 */
function pretty_calendar_config_info() {
  $prefixes['pretty_calendar.settings'] = array(
    'label' => t('Pretty Calendar settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_block_configure().
 */
function pretty_calendar_block_configure($delta = '') {
  $config = config('pretty_calendar.settings');
  $form['page_title'] = array(
    '#type' => 'textfield',
    '#size' => 128,
    '#maxlength' => 128,
    '#title' => t('Calendar page title'),
    '#default_value' => $config->get('page_title'),
    '#description' => t('Choose a title for page that will display all calendar nodes.'),
  );
  $form['show_pager'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show pager'),
    '#default_value' => $config->get('show_pager'),
    '#description' => t('Show a pager on the calendar listing page.'),
  );

  $node_types = node_type_get_types();
  $node_type_options = array();
  $node_type_options[''] = t('All node types');
  foreach ($node_types as $node_type) {
    $node_type_options[$node_type->type] = $node_type->name;
  }

  // Search themes.
  $themes = array(
    'minimal' => 'Minimal',
    'basis' => 'Basis for Backdrop',
    'standard' => 'Standard (deprecated)',
    'round' => 'Rounded (deprecated)',
    'vista_198' => 'Vista 198px (deprecated)',
    'gridy_182' => 'Gridy 182px (deprecated)',
  );
  $form['theme'] = array(
    '#type' => 'select',
    '#options' => $themes,
    '#title' => t('Theme'),
    '#default_value' => $config->get('theme'),
    '#description' => t('Select calendar appearance'),
  );

  $form['node_type'] = array(
    '#type' => 'checkboxes',
    '#options' => $node_type_options,
    '#multiple' => TRUE,
    '#title' => t('Node type'),
    '#default_value' => explode(',', $config->get('node_type')),
    '#description' => t('Select node type.'),
  );
  $form['node_invert'] = array(
    '#type' => 'checkbox',
    '#title' => t('Invert selection.'),
    '#default_value' => $config->get('node_invert'),
  );

  // Search date fields.
  $fields = field_info_fields();
  $fields_options[''] = t('Node creation date');

  $date_module = (module_exists('date') || module_exists('repeating_dates'));
  if ($date_module) {
    $field_desc = t('Select the field that contains the date of the event. By default, content will be selected by date created.');
    foreach ($fields as $field_type => $field_data) {
      if ($field_data['module'] == 'date' || $field_data['module'] == 'repeating_dates') {
        $fields_options[$field_data['module'] . '.' . $field_type] = $field_type;
      }
    }
    if (count($fields_options) == 1) {
      $field_desc = t('There are no custom date fields.');
    }
  }
  else {
    $field_desc = t('No supported date field module is enabled.');
  }

  $form['field_date'] = array(
    '#type' => 'select',
    '#options' => $fields_options,
    '#disabled' => !$date_module,
    '#title' => t('Date field'),
    '#default_value' => $config->get('date_module') . '.' . $config->get('field_name'),
    '#description' => $field_desc,
  );
  $system_formats = system_get_date_formats();
  $format_options = array();
  foreach ($system_formats as $date_format) {
    $format_options[$date_format['name']] = $date_format['label'] . ' (' . date($date_format['pattern']) . ')';

  }
  $form['date_format_listing'] = array(
    '#type' => 'select',
    '#options' => $format_options,
    '#title' => t('Format to use for dates on listings page'),
    '#default_value' => $config->get('date_format_listing'),
  );
  $form['upcoming_days'] = array(
    '#type' => 'number',
    '#title' => t('Display additional upcoming days'),
    '#description' => t('How many additional upcoming days would you like to show underneath the daily listing, if any? (up to 6 additional days to show a full week)'),
    '#size' => 2,
    '#min' => 0,
    '#max' => 6,
    '#step' => 1,
    '#default_value' => (int) $config->get('upcoming_days'),
  );
  $form['title_words'] = array(
    '#type' => 'textfield',
    '#size' => 64,
    '#maxlength' => 64,
    '#title' => t('Event headings'),
    '#default_value' => $config->get('title_words'),
    '#description' => t('Choose a name for the events that will be displayed when hovering on a date. For example, "12 events". Enter comma-separated words for plurals (for example, "event, events").'),
  );
  $form['link_type'] = array(
    '#title' => t('Link type'),
    '#type' => 'radios',
    '#options' => array(
      'popup' => t('Modal popup'),
      'link' => t('Link to the listing page'),
    ),
    '#default_value' => $config->get('link_type'),
  );
  $form['event_count'] = array(
    '#title' => t('Number of events in the popup'),
    '#type' => 'select',
    '#options' => backdrop_map_assoc(array(1, 2, 3, 4, 5, 8, 10, 15, 20)),
    '#default_value' => $config->get('event_count'),
    '#states' => array(
      'visible' => array(
        ':input[name="block_settings[link_type]"]' => array('value' => 'popup'),
      ),
    ),
  );
  $form['separate_languages'] = array(
    '#type' => 'checkbox',
    '#title' => t('Separate nodes by language'),
    '#default_value' => $config->get('separate_languages'),
    '#description' => t('If checked nodes will be selected in the language in which they were created.'),
  );

  return $form;
}

/**
 * Implements hook_block_save().
 */
function pretty_calendar_block_save($delta = '', $edit = array()) {
  $config = config('pretty_calendar.settings');
  $config->set('page_title', $edit['page_title']);
  $config->set('show_pager', $edit['show_pager']);
  $config->set('theme', $edit['theme']);
  $config->set('node_type', implode(",", $edit['node_type']));
  $config->set('node_invert', $edit['node_invert']);
  if (!empty($edit['field_date'])) {
    $field_date = explode('.', $edit['field_date']);
    $config->set('date_module', $field_date[0]);
    $config->set('field_name', $field_date[1]);
    if ($field_date[0] == 'date') {
      $config->set('column_name_start', $field_date[1] . '_value');
      $config->set('column_name_end', $field_date[1] . '_value2');
    }
    else if ($field_date[0] == 'repeating_dates') {
      $config->set('column_name_start', $field_date[1] . '_dtstart');
      $config->set('column_name_end', $field_date[1] . '_dtend');
    }
  }
  $config->set('date_format_listing', $edit['date_format_listing']);
  $config->set('upcoming_days', (int) $edit['upcoming_days']);
  $config->set('title_words', $edit['title_words']);
  $config->set('link_type', $edit['link_type']);
  $config->set('event_count', $edit['event_count']);
  $config->set('separate_languages', $edit['separate_languages']);
  $config->save();
}

/**
 * Implements hook_block_info().
 */
function pretty_calendar_block_info() {
  // This is unfortunate generic namespacing, but was inherited...
  $blocks['calendar'] = array(
    'info' => t('Calendar'),
    'description' => t('Simple calendar generated by the Pretty Calendar module, suitable for sidebars and small spaces.'),
  );
  $blocks['pretty_calendar_full'] = array(
    'info' => t('Pretty Calendar full'),
    'description' => t('Full calendar listing.'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function pretty_calendar_block_view($delta = '', $settings = array(), $contexts = array()) {
  $config = config('pretty_calendar.settings');
  $theme = $config->get('theme');

  $m = date('m');
  $y = date('Y');

  if (arg(0) == 'calendar') {
    if (arg(1) > 0) {
      $y = (int) arg(1);
    }
    if (arg(2) > 0) {
      $m = (int) arg(2);
    }
  }

  if (arg(0) == 'node' && is_numeric(arg(1)) && arg(1) > 0) {
    $types = explode(',', $config->get('node_type'));
    $use_all = in_array('', $types);
    $node = node_load(arg(1));
    if ($use_all || (in_array($node->type, $types) && !$use_all)) {
      $m = date('m', $node->created);
      $y = date('Y', $node->created);
    }
  }

  switch ($delta) {
    case 'calendar':
      $block['subject'] = t('Pretty Calendar - Simple');
      $block['content'] = array(
        '#markup' => pretty_calendar_block_content(mktime(0, 0, 0, $m, 1, $y), 'simple'),
        '#attached' => array(
          'library' => array(
            array('pretty_calendar', $theme),
          ),
        ),
      );
      break;

    case 'pretty_calendar_full':
      $block['subject'] = t('Pretty Calendar - Full');
      $block['content'] = array(
        '#markup' => pretty_calendar_block_content(mktime(0, 0, 0, $m, 1, $y), 'full'),
        '#attached' => array(
          'library' => array(
            array('pretty_calendar', $theme),
          ),
        ),
      );
      break;

  }

  return $block;
}

/**
 * Implements hook_library_info().
 *
 */
function pretty_calendar_library_info() {
  $module_info = system_get_info('module', 'pretty_calendar');
  $path = backdrop_get_path('module', 'pretty_calendar');
  $libraries = array(
    'pretty_calendar' => array(
      'title' => 'Pretty Calendar',
      'website' => 'https://backdropcms.org/project/pretty_calendar',
      'version' => $module_info['version'],
      'js' => array(
        $path . '/js/pretty_calendar.js' => array(),
      ),
      'css' => array(
        $path . '/css/pretty_calendar.css' => array(),
      ),
      'icons' => array(
        'caret-left',
        'caret-right',
      ),
      'dependencies' => array(
        array('system', 'backdrop.ajax'),
        array('system', 'backdrop.announce'),
      ),
    ),
    'minimal' => array(
      'title' => 'Pretty Calendar: Minimal theme',
      'css' => array(
        $path . '/themes/minimal/calendar.css' => array(),
      ),
      'icons' => array(
        'caret-double-left',
        'caret-double-right',
        'spinner',
      ),
      'dependencies' => array(
        array('pretty_calendar', 'pretty_calendar'),
      ),
    ),
    'basis' => array(
      'title' => 'Pretty Calendar: Basis theme',
      'css' => array(
        $path . '/themes/basis/calendar.css' => array(),
      ),
      'dependencies' => array(
        array('pretty_calendar', 'pretty_calendar'),
      ),
    ),
    'standard' => array(
      'title' => 'Pretty Calendar: Standard theme',
      'css' => array(
        $path . '/themes/standard/calendar.css' => array(),
      ),
      'dependencies' => array(
        array('pretty_calendar', 'pretty_calendar'),
      ),
    ),
    'round' => array(
      'title' => 'Pretty Calendar: Rounded theme',
      'css' => array(
        $path . '/themes/round/calendar.css' => array(),
      ),
      'dependencies' => array(
        array('pretty_calendar', 'pretty_calendar'),
      ),
    ),
    'vista_198' => array(
      'title' => 'Pretty Calendar: Vista 198px theme',
      'css' => array(
        $path . '/themes/vista_198/calendar.css' => array(),
      ),
      'dependencies' => array(
        array('pretty_calendar', 'pretty_calendar'),
      ),
    ),
    'gridy_182' => array(
      'title' => 'Pretty Calendar: Gridy 182px theme',
      'css' => array(
        $path . '/themes/gridy_182/calendar.css' => array(),
      ),
      'dependencies' => array(
        array('pretty_calendar', 'pretty_calendar'),
      ),
    ),
  );
  return $libraries;
}

/**
 * Rendering calendar block content.
 *
 * @param int $month
 *   Timestamp of selected month.
 * @param string $mode
 *   Calendar mode. Possible values: 'simple', 'full'.
 *
 * @return string
 *   Rendered block content.
 */
function pretty_calendar_block_content($month, $mode = 'simple') {
  global $language;
  $config = config('pretty_calendar.settings');
  // Get system settings for first day of the week. 0 = Sunday, 1 = Monday, etc.
  $first_day = config_get('system.date', 'first_day');
  // Timezone offset.
  $timezone_offset = _pretty_calendar_get_timezone_offset();

  // Format month array.
  // Get month timestamp.
  $month = mktime(0, 0, 0, date('m', $month), 12, date('Y', $month));
  // Get number of days in the given month.
  $days_in_month = date('t', $month);
  $day_count = 1;
  $num = 0;
  // Fill first week.
  // Days of previous month in beginning of the week will be skipped.
  for ($i = 0; $i < 7; $i++) {
    // Get numeric representation of the day of the week.
    $day_of_week = date('w', mktime(0, 0, 0, date('m', $month), $day_count, date('Y', $month)));
    $day_of_week = ($day_of_week + 7 - $first_day) % 7;
    if ($day_of_week == $i) {
      $week[$num][$i] = $day_count;
      $day_count++;
    }
    else {
      // Leave blank value of the day in previous month.
      $week[$num][$i] = "";
    }
  }
  // Fill other weeks.
  while (TRUE) {
    $num++;
    for ($i = 0; $i < 7; $i++) {
      $week[$num][$i] = $day_count;
      $day_count++;
      if ($day_count > $days_in_month) {
        break;
      }
    }
    if ($day_count > $days_in_month) {
      break;
    }
  }

  // Get names of the days.
  $daynames = array();
  for ($i = 0; $i <= 6; $i++) {
    $dayname_format = ($mode == 'full') ? 'l' : 'D';
    $adjusted_day = ($i + $first_day) % 7;
    $daynames[$i] = format_date(mktime(0, 0, 0, 1, $adjusted_day, 2001), 'custom', $dayname_format, NULL, $language->langcode);
    $daynames_class[$i] = ($i == 6 || ($first_day && $i == 5) || (!$first_day && $i == 0)) ? 'pretty-calendar--day pretty-calendar--weekend' : 'pretty-calendar--day';
  }

  // Get month name. Add context to t() for extended translation.
  $month_name = t(format_date($month, 'custom', 'F', NULL, 'en'), array(), array('context' => 'Nominative')) . ' ' . date('Y', $month);
  $column_name_start = $config->get('column_name_start');
  $link_type = $config->get('link_type');

  $output = '';

  // Get all nids for selected month.
  $day_count = array();
  $day_nids = array();
  for ($i = 1; $i < 32; $i++) {
    $day_count[$i] = 0;
  }
  $nodes = pretty_calendar_select_month_nodes($month);
  if (isset($nodes['error'])) {
    $output .= '<div class="messages error">' . t('database error') . '</div>';
  }
  else {
    foreach ($nodes as $node) {
      if (isset($node->$column_name_start)) {
        $node_day = (int) date('d', strtotime($node->$column_name_start) + $timezone_offset);
      }
      elseif (isset($node->created)) {
        $node_day = (int) date('d', $node->created + $timezone_offset);
      }
      $day_count[$node_day]++;
      $day_nids[$node_day][$node->nid] = $node->nid;
    }
  }

  // Format theme array.
  $now = time() + $timezone_offset;
  $days = array();
  for ($i = 0; $i < count($week); $i++) {
    for ($j = 0; $j < 7; $j++) {
      $day = !empty($week[$i][$j]) ? $week[$i][$j] : '';
      if ($mode == 'full') {
        $day_content = (!empty($day_count[$day])) ? views_embed_view('pretty_calendar', 'simple_list', implode('+', $day_nids[$day])) : t('No events');
      }
      else {
        $day_content = '';
      }
      $wrapper_classes_array = [];
      $link_classes_array = [
        'pretty-calendar--link',
      ];
      // Define cell classes.
      $wrapper_classes_array[] = 'pretty-calendar--day';
      // Include adjustment for $first_day when calculating weekend.
      if ($j == 6 || ($first_day && $j == 5) || (!$first_day && $j == 0)) {
        $wrapper_classes_array[] = 'pretty-calendar--weekend';
      }
      if ($day == date('d', $now) && date('m.Y', $now) == date('m.Y', $month)) {
        $wrapper_classes_array[] = 'pretty-calendar--today';
      }
      if (arg(3) == $day && arg(2) == date('m', $month) && arg(1) == date('Y', $month) && arg(0) == 'calendar') {
        $wrapper_classes_array[] = 'pretty-calendar--selected';
      }
      $count = !empty($day) ? $day_count[$day] : 0;
      if (!$count) {
        $wrapper_classes_array[] = ($day < $day_count && $day != "") ? 'pretty-calendar--empty' : 'pretty-calendar--blank';
      }
      $link_title = (!empty($day)) ? pretty_calendar_plural($count) : '';
      $link_types = array('popup', 'link');
      $day_settings = array(
        'calendar_mode' => $mode,
        'day_number' => $day,
        'day_number_a11y' => format_date(mktime(0, 0, 0, date('m', $month), (int) $day, date('Y', $month)), 'custom', 'l, F j', NULL, $language->langcode),
        'day_content' => $day_content,
        'delta' => $j + 1,
        'wrapper_class' => implode(' ', $wrapper_classes_array),
        'count' => $count,
        'link_title' => $link_title,
        'link_class' => implode(' ', $link_classes_array),
        'link_dialog' => ($link_type == 'popup'),
        'link_dialog_options' => json_encode(array(
          'modal' => TRUE,
          'dialogClass' => 'pretty-calendar--dialog',
          'width' => '300',
        )),
      );
      if (!empty($day)) {
        $url_yearmonth = date('Y/m', $month);
        $url_day = sprintf('%02d', $day);
        foreach ($link_types as $type) {
          $url_prefix = ($type == 'popup') ? 'calendar_links' : 'calendar';
          $url_suffix = ($type == 'popup') ? '/nojs' : '';
          $day_settings[$type . '_path'] = (!empty($day)) ? url($url_prefix . '/' . $url_yearmonth . '/' . $url_day . $url_suffix) : '';
        }
      }

      $days[] = theme('pretty_calendar_day', $day_settings);
    }
    $output .= theme('pretty_calendar_week', array(
      'days' => $days,
      'delta' => $i + 1,
    ));
    $days = array();
  }

  return theme('pretty_calendar', array(
    'daynames' => $daynames,
    'daynames_class' => $daynames_class,
    'content' => $output,
    'mode' => $mode,
    'month_prev' => mktime(0, 0, 0, date('m', $month) - 1, 12, date('Y', $month)),
    'month_prev_text' => t('Previous month'),
    'month_next' => mktime(0, 0, 0, date('m', $month) + 1, 12, date('Y', $month)),
    'month_next_text' => t('Next month'),
    'month_name' => $month_name,
    'calendar_classes' => implode(' ', array(
      'pretty-calendar--body',
      'pretty-calendar--' . $mode,
      'pretty-calendar--' . $link_type,
    )),
  ));
}

/**
 * AJAX response for calendar navigation.
 *
 * @param string $mode
 *   Calendar mode. Possible values: 'simple', 'full'.
 * @param int $month
 *   Timestamp of selected month.
 *
 * @return string
 *   Rendered block content.
 */
function pretty_calendar_content_loader($mode, $month) {
  $mode = ($mode == 'full') ? 'full' : 'simple';
  $month = (!empty($month)) ? $month : time();
  return array(
    '#markup' => pretty_calendar_block_content((int) $month, $mode),
  );
}

/**
 * Delivery callback for simple HTML snippet.
 */
function pretty_calendar_content_loader_delivery_callback($page_callback_result) {
  if (!empty($page_callback_result)) {
    print backdrop_render($page_callback_result);
  }
}

/**
 * AJAX response for preloading node links.
 *
 * @param int $year
 *   Selected year in "YYYY" format.
 *
 * @param int $month
 *   Selected month in "MM" format.
 *
 * @param int $day
 *   Selected day in "DD" format.
 *
 * @return string
 *   Rendered list of links.
 */
function pretty_calendar_links_loader($year, $month, $day, $page_mode = 'nojs') {
  $markup = '';
  $date = mktime(0, 0, 0, (int) $month, (int) $day, (int) $year);
  $nodes = pretty_calendar_select_nodes($date, TRUE);
  $event_names = explode(',', config_get('pretty_calendar.settings', 'title_words'));
  $events_name = trim($event_names[1]);
  if (count($nodes) > 0) {
    $event_count = config_get('pretty_calendar.settings', 'event_count');
    $counter = 0;
    $nids = array();
    foreach ($nodes as $node) {
      $nids[] = $node->nid;
      $counter++;
      if ($counter >= $event_count) {
        break;
      }
    }
    $markup .= views_embed_view('pretty_calendar', 'simple_list', implode('+', $nids));
  }
  else {
    $markup .= '<p class="pretty-calendar--shortlist__empty">' . t('No @events', array('@events' => $events_name)) . '</p>';
  }

  $markup .= '<p class="pretty-calendar--shortlist__page-link">' .
      l(t('Go to @events listing', array('@events' => $events_name)), "calendar/$year/$month/$day") .
      '</p>';

  return array(
    'content' => array(
      '#markup' => $markup,
    ),
  );
}

/**
 * Title callback for AJAX response for calendar day nodes.
 */
function pretty_calendar_links_loader_title_callback($year, $month, $day, $page_mode = 'nojs') {
  $date = mktime(0, 0, 0, (int) $month, (int) $day, (int) $year);
  if ($page_mode === 'ajax') {
    $title = format_date($date, 'custom', 'F j, Y');
  }
  else {
    $event_names = explode(',', config_get('pretty_calendar.settings', 'title_words'));
    $events_name = trim($event_names[1]);
    $title = t('@events for @date', array(
      '@events' => ucfirst($events_name),
      '@date' => format_date($date, 'custom', 'l, F j, Y'),
    ));
  }
  return $title;
}

/**
 * Extended plural values.
 *
 * To translate names we should set some values or leave "story,stories'.
 * Then we can use "1 story", "@count stories", "@count[2] stories" on
 * "/admin/config/regional/translate/translate" page.
 *
 * @param int $count
 *   Number.
 *
 * @return string
 *   Formatted plural value. For example, "17 events".
 */
function pretty_calendar_plural($count) {
  $event_names = explode(',', config_get('pretty_calendar.settings', 'title_words'));
  if (!isset($event_names[0]) || !isset($event_names[1])) {
    $event_names = explode(',', 'event,events');
  }
  return format_plural($count, '1 ' . trim($event_names[0]), '@count ' . trim($event_names[1]));
}

/**
 * Select nodes for selected date.
 *
 * @param int $date
 *   Date timestamp.
 *
 * @param bool $links_only
 *   Boolean value. If "TRUE", returned result will be contain pager element.
 *
 * @return array|DatabaseStatementInterface
 *   By dependency of $links_only value, result will be array or query result.
 */
function pretty_calendar_select_nodes($date = 0, $links_only = FALSE) {
  global $language;
  $config = config('pretty_calendar.settings');
  $field_name = $config->get('field_name');
  $column_name_start = $config->get('column_name_start');
  $node_types = explode(',', $config->get('node_type'));

  // Check if field was deleted.
  if (field_info_field($field_name) == '') {
    $field_name = '';
  }

  // Select nodes without date field.
  $select = db_select('node', 'n')
    ->fields('n', array('nid', 'title', 'created'))
    ->condition('n.status', 1);
  // Multilanguage condition.
  if ($config->get('separate_languages')) {
    $select->condition('n.language', $language->langcode);
  }
  // Check date.
  if ($date > 0) {
    $timezone_offset = _pretty_calendar_get_timezone_offset();
    if (empty($field_name)) {
      $select
        ->condition('created', $date, '>=')
        ->condition('created', $date + 86400, '<');
    }
    else {
      $select->distinct();
      $select->leftJoin('field_data_' . $field_name, 'fd', 'fd.entity_id = n.nid');
      $select->fields('fd', array($column_name_start));
      $select->where('DATE(ADDTIME(' . $column_name_start . ', SEC_TO_TIME(' . $timezone_offset . '))) = :date', array(':date' => date('Y-m-d', $date)));
    }
  }
  // Check types.
  if ($node_types[0] != '') {
    if ($config->get('node_invert')) {
      $select->condition('n.type', $node_types, 'NOT IN');
    }
    else {
      $select->condition('n.type', $node_types, 'IN');
    }
  }
  $select->orderBy('n.sticky', 'DESC')
    ->orderBy('n.created', 'DESC');

  if (!$links_only) {
    $select->addTag('node_access');
    return $select->execute()->fetchCol();
  }
  else {
    $select->addTag('node_access');
    $result = array();
    foreach ($select->execute() as $row) {
      $result[] = $row;
    }
    return $result;
  }
}

/**
 * Select all month nodes.
 *
 * @param int $date
 *   Timestamp of selected month.
 *
 * @return array
 *   Nids array for the given month.
 */
function pretty_calendar_select_month_nodes($date = 0) {
  global $language;
  $config = config('pretty_calendar.settings');
  $field_name = $config->get('field_name');
  $column_name_start = $config->get('column_name_start');
  $column_name_end = $config->get('column_name_end');
  $node_types = explode(',', $config->get('node_type'));

  // Check if field was deleted.
  if (field_info_field($field_name) == '') {
    $field_name = '';
  }

  // Select nodes without date field.
  $select = db_select('node', 'n')
    ->fields('n', array('nid', 'title', 'created'))
    ->condition('n.status', 1);
  // Multilanguage condition.
  if ($config->get('separate_languages')) {
    $select->condition('n.language', $language->langcode);
  }
  // Check date.
  if ($date > 0) {
    $timezone_offset = _pretty_calendar_get_timezone_offset();
    if ($field_name == '') {
      $select
        ->condition('created', mktime(0, 0, 0, date('m', $date), 1, date('Y', $date)), '>=')
        ->condition('created', mktime(0, 0, 0, date('m', $date) + 1, 1, date('Y', $date)), '<');
    }
    else if ($config->get('date_module') == 'date') {
      $select->distinct();
      $select->leftJoin('field_data_' . $field_name, 'fd', 'fd.entity_id = n.nid');
      $select->fields('fd', array($column_name_start));
      $select->where('DATE_FORMAT(ADDTIME(fd.' . $column_name_start . ', SEC_TO_TIME(' . $timezone_offset . ')), \'%Y%m\') = :stamp', array(':stamp' => date('Ym', $date)));
    }
    else if ($config->get('date_module') == 'repeating_dates') {
      $select->distinct();
      $select->leftJoin('field_data_' . $field_name, 'fd', 'fd.entity_id = n.nid');
      $select->fields('fd', array($column_name_start));
      $select->condition('fd.' . $column_name_start, mktime(0, 0, 0, date('m', $date + $timezone_offset), 1, date('Y', $date)), '>=');
      $select->condition('fd.' . $column_name_start, mktime(0, 0, 0, date('m', $date + $timezone_offset) + 1, 1, date('Y', $date)), '<');
    }
  }
  // Check types.
  if ($node_types[0] != '') {
    if ($config->get('node_invert')) {
      $select->condition('n.type', $node_types, 'NOT IN');
    }
    else {
      $select->condition('n.type', $node_types, 'IN');
    }
  }
  $select->addTag('node_access');
  $result = array();

  try {
    foreach ($select->execute() as $row) {
      $result[] = $row;
    }
  }
  catch (Exception $e) {
    $result['error'] = $e;
  }

  return $result;
}

/**
 * Display page with selected day nodes.
 *
 * @param int $year
 *   Selected year in "YYYY" format.
 *
 * @param int $month
 *   Selected month in "MM" format.
 *
 * @param int $day
 *   Selected day in "DD" format.
 *
 * @return string
 *   Rendered page content.
 */
function pretty_calendar_day_nodes($year = 0, $month = 0, $day = 0) {
  global $language;

  $year = (!empty($year)) ? $year : date('Y');
  $month = (!empty($month)) ? $month : date('m');
  $day = (!empty($day)) ? $day : date('d');
  $output = '';
  $config = config('pretty_calendar.settings');
  $upcoming_days = (int) $config->get('upcoming_days');
  $date_format_listing = $config->get('date_format_listing');
  $now = time() + _pretty_calendar_get_timezone_offset();
  $show_today_indicator = 0;
  $show_pager = $config->get('show_pager');
  $count = 0;
  do {
    $date = mktime(0, 0, 0, (int) $month, (int) $day, (int) $year) + $count * 86400;
    $show_today_indicator = (empty($count) && date('Y-m-d', $now) == $year . '-' . $month . '-' . $day);
    $dateresult = pretty_calendar_node_list($date);
    if ($show_pager) {
      $prev_date = $date - (($upcoming_days + 1) * 86400);
      $pager_prev_link = url('calendar/' . date('Y', $prev_date) . '/' . date('m', $prev_date) . '/' . date('d', $prev_date));
      $pager_prev_title = format_date($prev_date, $date_format_listing, NULL, NULL, $language->langcode);
      $next_date = $date + (($upcoming_days + 1) * 86400);
      $pager_next_link = url('calendar/' . date('Y', $next_date) . '/' . date('m', $next_date) . '/' . date('d', $next_date));
      $pager_next_title = format_date($next_date, $date_format_listing, NULL, NULL, $language->langcode);
    }
    else {
      $pager_prev_link = NULL;
      $pager_prev_title = NULL;
      $pager_next_link = NULL;
      $pager_next_title = NULL;
    }
    $output .= theme('pretty_calendar_node_listing', array(
      'show_today_indicator' => $show_today_indicator,
      'date_title' => format_date($date, $date_format_listing, NULL, NULL, $language->langcode),
      'show_pager' => $show_pager,
      'pager_prev_link' => $pager_prev_link,
      'pager_prev_title' => $pager_prev_title,
      'pager_next_link' => $pager_next_link,
      'pager_next_title' => $pager_next_title,
      'content' => $dateresult,
    ));
    // If we've already shown the pager once, we don't need to do it anymore
    // on potential upcoming days (ie. if we're showing additional upcoming
    // days).
    $show_pager = 0;
    $count++;
  } while ($count <= $upcoming_days);

  if (!empty($output)) {
    backdrop_add_library('pretty_calendar', 'pretty_calendar');
  }
  return $output;
}

/**
 * Display page with nodes by date.
 *
 * @param int $date
 *   Timestamp of selected month.
 *
 * @return string
 *   Rendered page content.
 */
function pretty_calendar_node_list($date = 0) {
  backdrop_set_title(config_get('pretty_calendar.settings', 'page_title'));
  $nids = pretty_calendar_select_nodes($date);
  $filter = (!empty($nids)) ? implode('+', $nids) : NULL;
  $result = views_embed_view('pretty_calendar', 'teaser_list', $filter);
  return $result;
}

/**
 * * Get server timezone offset from UTC.
 */
function _pretty_calendar_get_timezone_offset() {
  date_default_timezone_set('UTC');
  $timezone = config_get('system.date', 'default_timezone');
  $dateTimeZoneUTC = new DateTimeZone("UTC");
  $dateTimeZoneServer = new DateTimeZone($timezone);
  $dateTimeUTC = new DateTime("now", $dateTimeZoneUTC);

  $timeOffset = $dateTimeZoneServer->getOffset($dateTimeUTC);

  return $timeOffset;
}
